@using System.Text.Json
@using Statiq.TimeWarp.Extension
@using Statiq.Common

@{
  var timestamp = DateTimeOffset.FromUnixTimeMilliseconds(Model.Timestamp).UtcDateTime.ToLongDateString();
  var Destination_Parent_FullPath = new NormalizedPath($"{Document.Destination}").Parent.FullPath;
  var Destination_Parent_Parent_FullPath = new NormalizedPath($"{Document.Destination}").Parent.Parent.FullPath;

  var destination = new NormalizedPath(Document.Destination.ToString());
  NormalizedPath destinationFileName = destination.FileName;
  NormalizedPath newDestination = destination.Parent.Parent.ChangeFileName(destinationFileName);
  NormalizedPath imageDestination = new NormalizedPath("images").Combine(destinationFileName);
}
<div>
  <h1>Calculated values</h1>
  <table>
    <thead>
      <tr>
        <th>
          Name
        </th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>imageDestination</td>
        <td>@imageDestination</td>
      </tr>
      <tr>
        <td>newDestination</td>
        <td>@newDestination</td>
      </tr>
      <tr>
        <td>destinationFileName</td>
        <td>@destinationFileName</td>
      </tr>
      <tr>
        <td>Destination Parent FullPath</td>
        <td>@Destination_Parent_FullPath</td>
      </tr>
      <tr>
        <td>Destination Parent Parent FullPath</td>
        <td>@Destination_Parent_Parent_FullPath</td>
      </tr>
    </tbody>
  </table>

  <h1>Document Core Properties</h1>
  <p>
    See <a href="https://www.statiq.dev/guide/documents-and-metadata/">Documents and Metadata</a>
  </p>
  <table>
    <thead>
      <tr>
        <th>Name</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>@nameof(Document.Id)</td>
        <td>@Document.Id</td>
      </tr>
      <tr>
        <td>@nameof(Document.ContentProvider)</td>
        <td>@Document.ContentProvider</td>
      </tr>
      <tr>
        <td>@nameof(Model.Destination)</td>
        <td>@Document.Destination</td>
      </tr>
      <tr>
        <td>DestinationPath</td>
        <td>@Document.GetString("DestinationPath")</td>
      </tr>
      <tr>
        <td>@nameof(Document.Source)</td>
        <td>@Document.Source</td>
      </tr>
      <tr>
        <td>@nameof(Document.Timestamp)</td>
        <td>@Document.Timestamp</td>
      </tr>
      <tr>
        <td>@nameof(Document.Timestamp)</td>
        <td>@timestamp</td>
      </tr>
    </tbody>
  </table>

  <h1>Inputs</h1>

  <table>
    <thead>
      <tr>
        <th>Id</th>
        <th>Source</th>
        <th>Destination</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var input in Inputs)
      {
        <tr>
          <td>@input.Id</td>
          <td>@input.Source.GetRelativeInputPath()</td>
          <td>@input.Destination</td>
        </tr>
      }
      <tr>
    </tbody>
  </table>

  <h1>Pipeline Outputs</h1>

  <table>
    <thead>
      <tr>
        <th>Id</th>
        <th>Source</th>
        <th>Destination</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var output in Outputs)
      {
        <tr>
          <td>@output.Id</td>
          <td>@output.Source.GetRelativeInputPath()</td>
          <td>@output.Destination</td>
        </tr>
      }
      <tr>
    </tbody>
  </table>

  <h1>Output Pages</h1>

  <table>
    <thead>
      <tr>
        <th>Id</th>
        <th>Source</th>
        <th>Destination</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var output in OutputPages)
      {
        <tr>
          <td>@output.Id</td>
          <td>@output.Source.GetRelativeInputPath()</td>
          <td>@output.Destination</td>
        </tr>
      }
      <tr>
    </tbody>
  </table>

  <h1>Context</h1>

  <table>
    <thead>
      <tr>
        <th>Property</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>ClassCatalog.Count</td>
        <td>@Context.ClassCatalog.Count</td>
      </tr>
      <tr>
        <td>@nameof(Context.Phase)</td>
        <td>@Context.Phase</td>
      </tr>
      <tr>
        <td>@nameof(Context.Module)</td>
        <td>@Context.Module</td>
      </tr>
      <tr>
        <td>ApplicationState.Arguments</td>
        <td>@string.Join(',',Context.ApplicationState.Arguments)</td>
      </tr>
      <tr>
        <td>ApplicationState.CommandName</td>
        <td>@Context.ApplicationState.CommandName</td>
      </tr>
      <tr>
        <td>ApplicationState.Input</td>
        <td>@Context.ApplicationState.Input</td>
      </tr>
    </tbody>
  </table>

  <h2>Pipelines</h2>

  <table>
    <thead>
      <tr>
        <th>Key</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var pipeline in Context.ExecutingPipelines)
      {
        <tr>
          <td>@pipeline.Key</td>

          @{
            string pipelineHtml = ((IPipeline)(pipeline.Value)).Dump().Replace("\n", "<br />").Replace("    ", "--");
          }
          <td>@Html.Raw(pipelineHtml)</td>
        </tr>
      }
      <tr>
    </tbody>
  </table>

  <h2>ShortCodes</h2>

  <table>
    <thead>
      <tr>
        <th>Key</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var shortcode in Context.Shortcodes)
      {
        <tr>
          <td>@shortcode</td>
        </tr>
      }
      <tr>
    </tbody>
  </table>
</div>
